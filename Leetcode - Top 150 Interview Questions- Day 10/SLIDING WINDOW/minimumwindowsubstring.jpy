/* 
 Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
*/

class Solution:
    def minWindow(self, s: str, t: str) -> str:
        # Initialize frequency map for characters in t
        t_freq = {}
        for char in t:
            t_freq[char] = t_freq.get(char, 0) + 1

        # Initialize pointers and variables
        left, right = 0, 0
        min_length = float('inf')
        min_window = ""
        count = len(t)

        while right < len(s):
            # Expand the window
            if s[right] in t_freq:
                if t_freq[s[right]] > 0:
                    count -= 1
                t_freq[s[right]] -= 1

            # Contract the window
            while count == 0:
                if right - left + 1 < min_length:
                    min_length = right - left + 1
                    min_window = s[left:right + 1]

                if s[left] in t_freq:
                    t_freq[s[left]] += 1
                    if t_freq[s[left]] > 0:
                        count += 1
                left += 1

            right += 1

        return min_window


 